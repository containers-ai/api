/// This file has messages related to the CRUD to Prometheus. This file will be deprated in v0.2.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v4.0.0
// source: alameda_api/v1alpha1/operator/server.proto

package operator

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//*
// Metric type
type MetricType int32

const (
	MetricType_CONTAINER_CPU_USAGE_TOTAL      MetricType = 0
	MetricType_CONTAINER_CPU_USAGE_TOTAL_RATE MetricType = 1
	MetricType_CONTAINER_MEMORY_USAGE         MetricType = 2
	MetricType_NODE_CPU_USAGE_SECONDS_AVG1M   MetricType = 3
	MetricType_NODE_MEMORY_USAGE_BYTES        MetricType = 4
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "CONTAINER_CPU_USAGE_TOTAL",
		1: "CONTAINER_CPU_USAGE_TOTAL_RATE",
		2: "CONTAINER_MEMORY_USAGE",
		3: "NODE_CPU_USAGE_SECONDS_AVG1M",
		4: "NODE_MEMORY_USAGE_BYTES",
	}
	MetricType_value = map[string]int32{
		"CONTAINER_CPU_USAGE_TOTAL":      0,
		"CONTAINER_CPU_USAGE_TOTAL_RATE": 1,
		"CONTAINER_MEMORY_USAGE":         2,
		"NODE_CPU_USAGE_SECONDS_AVG1M":   3,
		"NODE_MEMORY_USAGE_BYTES":        4,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_alameda_api_v1alpha1_operator_server_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_alameda_api_v1alpha1_operator_server_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{0}
}

//*
// Resource type.
type ResourceType int32

const (
	ResourceType_POD ResourceType = 0
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "POD",
	}
	ResourceType_value = map[string]int32{
		"POD": 0,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_alameda_api_v1alpha1_operator_server_proto_enumTypes[1].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_alameda_api_v1alpha1_operator_server_proto_enumTypes[1]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{1}
}

type StrOp int32

const (
	StrOp_EQUAL     StrOp = 0
	StrOp_NOT_EQUAL StrOp = 1
)

// Enum value maps for StrOp.
var (
	StrOp_name = map[int32]string{
		0: "EQUAL",
		1: "NOT_EQUAL",
	}
	StrOp_value = map[string]int32{
		"EQUAL":     0,
		"NOT_EQUAL": 1,
	}
)

func (x StrOp) Enum() *StrOp {
	p := new(StrOp)
	*p = x
	return p
}

func (x StrOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrOp) Descriptor() protoreflect.EnumDescriptor {
	return file_alameda_api_v1alpha1_operator_server_proto_enumTypes[2].Descriptor()
}

func (StrOp) Type() protoreflect.EnumType {
	return &file_alameda_api_v1alpha1_operator_server_proto_enumTypes[2]
}

func (x StrOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StrOp.Descriptor instead.
func (StrOp) EnumDescriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{2}
}

//*
// Represents a time range definition
//
type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Step      *duration.Duration   `protobuf:"bytes,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{0}
}

func (x *TimeRange) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TimeRange) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TimeRange) GetStep() *duration.Duration {
	if x != nil {
		return x.Step
	}
	return nil
}

//*
// Represents a Kubernetes label selector
//
type LabelSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Op    StrOp  `protobuf:"varint,2,opt,name=op,proto3,enum=containers_ai.alameda.v1alpha1.operator.StrOp" json:"op,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LabelSelector) Reset() {
	*x = LabelSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelector) ProtoMessage() {}

func (x *LabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelector.ProtoReflect.Descriptor instead.
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{1}
}

func (x *LabelSelector) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelSelector) GetOp() StrOp {
	if x != nil {
		return x.Op
	}
	return StrOp_EQUAL
}

func (x *LabelSelector) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

//*
// Represents a data point of time-series metric data
//
type Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Value float64              `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Sample) Reset() {
	*x = Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{2}
}

func (x *Sample) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Sample) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

//*
// Represents a data point of metric data
//
type MetricResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels  map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Samples []*Sample         `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *MetricResult) Reset() {
	*x = MetricResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricResult) ProtoMessage() {}

func (x *MetricResult) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricResult.ProtoReflect.Descriptor instead.
func (*MetricResult) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{3}
}

func (x *MetricResult) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricResult) GetSamples() []*Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

//*
// Represents a request for listing metric data with the logically combined (AND) conditions
type ListMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricType MetricType `protobuf:"varint,1,opt,name=metric_type,json=metricType,proto3,enum=containers_ai.alameda.v1alpha1.operator.MetricType" json:"metric_type,omitempty"`
	// Types that are assignable to TimeSelector:
	//	*ListMetricsRequest_Time
	//	*ListMetricsRequest_Duration
	//	*ListMetricsRequest_TimeRange
	TimeSelector isListMetricsRequest_TimeSelector `protobuf_oneof:"time_selector"`
	Conditions   []*LabelSelector                  `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *ListMetricsRequest) Reset() {
	*x = ListMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricsRequest) ProtoMessage() {}

func (x *ListMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricsRequest.ProtoReflect.Descriptor instead.
func (*ListMetricsRequest) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{4}
}

func (x *ListMetricsRequest) GetMetricType() MetricType {
	if x != nil {
		return x.MetricType
	}
	return MetricType_CONTAINER_CPU_USAGE_TOTAL
}

func (m *ListMetricsRequest) GetTimeSelector() isListMetricsRequest_TimeSelector {
	if m != nil {
		return m.TimeSelector
	}
	return nil
}

func (x *ListMetricsRequest) GetTime() *timestamp.Timestamp {
	if x, ok := x.GetTimeSelector().(*ListMetricsRequest_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ListMetricsRequest) GetDuration() *duration.Duration {
	if x, ok := x.GetTimeSelector().(*ListMetricsRequest_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ListMetricsRequest) GetTimeRange() *TimeRange {
	if x, ok := x.GetTimeSelector().(*ListMetricsRequest_TimeRange); ok {
		return x.TimeRange
	}
	return nil
}

func (x *ListMetricsRequest) GetConditions() []*LabelSelector {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type isListMetricsRequest_TimeSelector interface {
	isListMetricsRequest_TimeSelector()
}

type ListMetricsRequest_Time struct {
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3,oneof"`
}

type ListMetricsRequest_Duration struct {
	Duration *duration.Duration `protobuf:"bytes,3,opt,name=duration,proto3,oneof"`
}

type ListMetricsRequest_TimeRange struct {
	TimeRange *TimeRange `protobuf:"bytes,4,opt,name=time_range,json=timeRange,proto3,oneof"`
}

func (*ListMetricsRequest_Time) isListMetricsRequest_TimeSelector() {}

func (*ListMetricsRequest_Duration) isListMetricsRequest_TimeSelector() {}

func (*ListMetricsRequest_TimeRange) isListMetricsRequest_TimeSelector() {}

//*
// Represents a response of a list metric data request
//
type ListMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*MetricResult `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	Status  *status.Status  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ListMetricsResponse) Reset() {
	*x = ListMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricsResponse) ProtoMessage() {}

func (x *ListMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricsResponse.ProtoReflect.Descriptor instead.
func (*ListMetricsResponse) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{5}
}

func (x *ListMetricsResponse) GetMetrics() []*MetricResult {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ListMetricsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

//*
// Represents a request for listing metric data summation by grouping labels.
type ListMetricsSumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricType MetricType `protobuf:"varint,1,opt,name=metric_type,json=metricType,proto3,enum=containers_ai.alameda.v1alpha1.operator.MetricType" json:"metric_type,omitempty"`
	// Types that are assignable to TimeSelector:
	//	*ListMetricsSumRequest_Time
	//	*ListMetricsSumRequest_Duration
	//	*ListMetricsSumRequest_TimeRange
	TimeSelector isListMetricsSumRequest_TimeSelector `protobuf_oneof:"time_selector"`
	Conditions   []*LabelSelector                     `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Labels       []string                             `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *ListMetricsSumRequest) Reset() {
	*x = ListMetricsSumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricsSumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricsSumRequest) ProtoMessage() {}

func (x *ListMetricsSumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricsSumRequest.ProtoReflect.Descriptor instead.
func (*ListMetricsSumRequest) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{6}
}

func (x *ListMetricsSumRequest) GetMetricType() MetricType {
	if x != nil {
		return x.MetricType
	}
	return MetricType_CONTAINER_CPU_USAGE_TOTAL
}

func (m *ListMetricsSumRequest) GetTimeSelector() isListMetricsSumRequest_TimeSelector {
	if m != nil {
		return m.TimeSelector
	}
	return nil
}

func (x *ListMetricsSumRequest) GetTime() *timestamp.Timestamp {
	if x, ok := x.GetTimeSelector().(*ListMetricsSumRequest_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ListMetricsSumRequest) GetDuration() *duration.Duration {
	if x, ok := x.GetTimeSelector().(*ListMetricsSumRequest_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ListMetricsSumRequest) GetTimeRange() *TimeRange {
	if x, ok := x.GetTimeSelector().(*ListMetricsSumRequest_TimeRange); ok {
		return x.TimeRange
	}
	return nil
}

func (x *ListMetricsSumRequest) GetConditions() []*LabelSelector {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ListMetricsSumRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type isListMetricsSumRequest_TimeSelector interface {
	isListMetricsSumRequest_TimeSelector()
}

type ListMetricsSumRequest_Time struct {
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3,oneof"`
}

type ListMetricsSumRequest_Duration struct {
	Duration *duration.Duration `protobuf:"bytes,3,opt,name=duration,proto3,oneof"`
}

type ListMetricsSumRequest_TimeRange struct {
	TimeRange *TimeRange `protobuf:"bytes,4,opt,name=time_range,json=timeRange,proto3,oneof"`
}

func (*ListMetricsSumRequest_Time) isListMetricsSumRequest_TimeSelector() {}

func (*ListMetricsSumRequest_Duration) isListMetricsSumRequest_TimeSelector() {}

func (*ListMetricsSumRequest_TimeRange) isListMetricsSumRequest_TimeSelector() {}

//*
// Represents a response of a request for listing metric data summation by grouping labels
type ListMetricsSumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*MetricResult `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	Status  *status.Status  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ListMetricsSumResponse) Reset() {
	*x = ListMetricsSumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricsSumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricsSumResponse) ProtoMessage() {}

func (x *ListMetricsSumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricsSumResponse.ProtoReflect.Descriptor instead.
func (*ListMetricsSumResponse) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{7}
}

func (x *ListMetricsSumResponse) GetMetrics() []*MetricResult {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ListMetricsSumResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

//*
// Represents a request of getting info of a resource type
type GetResourceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      ResourceType `protobuf:"varint,1,opt,name=type,proto3,enum=containers_ai.alameda.v1alpha1.operator.ResourceType" json:"type,omitempty"`
	Namespace string       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetResourceInfoRequest) Reset() {
	*x = GetResourceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceInfoRequest) ProtoMessage() {}

func (x *GetResourceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetResourceInfoRequest) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{8}
}

func (x *GetResourceInfoRequest) GetType() ResourceType {
	if x != nil {
		return x.Type
	}
	return ResourceType_POD
}

func (x *GetResourceInfoRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetResourceInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//*
// Represents a request of getting recommendation of a resource type
type GetResourceRecommendationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      ResourceType `protobuf:"varint,1,opt,name=type,proto3,enum=containers_ai.alameda.v1alpha1.operator.ResourceType" json:"type,omitempty"`
	Namespace string       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetResourceRecommendationRequest) Reset() {
	*x = GetResourceRecommendationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceRecommendationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceRecommendationRequest) ProtoMessage() {}

func (x *GetResourceRecommendationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceRecommendationRequest.ProtoReflect.Descriptor instead.
func (*GetResourceRecommendationRequest) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{9}
}

func (x *GetResourceRecommendationRequest) GetType() ResourceType {
	if x != nil {
		return x.Type
	}
	return ResourceType_POD
}

func (x *GetResourceRecommendationRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetResourceRecommendationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//*
// Represents a resource configuration including limits and requests
type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   map[string]string `protobuf:"bytes,1,rep,name=limit,proto3" json:"limit,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Request map[string]string `protobuf:"bytes,2,rep,name=request,proto3" json:"request,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{10}
}

func (x *Resource) GetLimit() map[string]string {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *Resource) GetRequest() map[string]string {
	if x != nil {
		return x.Request
	}
	return nil
}

//*
// Represents a resource configuration recommenation
type Recommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Resource *Resource            `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *Recommendation) Reset() {
	*x = Recommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recommendation) ProtoMessage() {}

func (x *Recommendation) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recommendation.ProtoReflect.Descriptor instead.
func (*Recommendation) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{11}
}

func (x *Recommendation) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Recommendation) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

//*
// Represents a predicted value
type PredictData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Value string               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PredictData) Reset() {
	*x = PredictData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictData) ProtoMessage() {}

func (x *PredictData) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictData.ProtoReflect.Descriptor instead.
func (*PredictData) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{12}
}

func (x *PredictData) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *PredictData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

//*
// Represents a predicted value of time-series data
type TimeSeriesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredictData []*PredictData `protobuf:"bytes,1,rep,name=predict_data,json=predictData,proto3" json:"predict_data,omitempty"`
}

func (x *TimeSeriesData) Reset() {
	*x = TimeSeriesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeriesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesData) ProtoMessage() {}

func (x *TimeSeriesData) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesData.ProtoReflect.Descriptor instead.
func (*TimeSeriesData) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{13}
}

func (x *TimeSeriesData) GetPredictData() []*PredictData {
	if x != nil {
		return x.PredictData
	}
	return nil
}

//*
// Represents predictions and recommendations  for a container
type PredictContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RawPredictData  map[string]*TimeSeriesData `protobuf:"bytes,2,rep,name=raw_predict_data,json=rawPredictData,proto3" json:"raw_predict_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Recommendations []*Recommendation          `protobuf:"bytes,3,rep,name=recommendations,proto3" json:"recommendations,omitempty"`
	InitialResource *Resource                  `protobuf:"bytes,4,opt,name=initial_resource,json=initialResource,proto3" json:"initial_resource,omitempty"`
}

func (x *PredictContainer) Reset() {
	*x = PredictContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictContainer) ProtoMessage() {}

func (x *PredictContainer) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictContainer.ProtoReflect.Descriptor instead.
func (*PredictContainer) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{14}
}

func (x *PredictContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PredictContainer) GetRawPredictData() map[string]*TimeSeriesData {
	if x != nil {
		return x.RawPredictData
	}
	return nil
}

func (x *PredictContainer) GetRecommendations() []*Recommendation {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

func (x *PredictContainer) GetInitialResource() *Resource {
	if x != nil {
		return x.InitialResource
	}
	return nil
}

//*
// Represents predictions and recommendations of a pod
type PredictPod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               string              `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Namespace         string              `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name              string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PredictContainers []*PredictContainer `protobuf:"bytes,4,rep,name=predict_containers,json=predictContainers,proto3" json:"predict_containers,omitempty"`
}

func (x *PredictPod) Reset() {
	*x = PredictPod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictPod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictPod) ProtoMessage() {}

func (x *PredictPod) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictPod.ProtoReflect.Descriptor instead.
func (*PredictPod) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{15}
}

func (x *PredictPod) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PredictPod) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PredictPod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PredictPod) GetPredictContainers() []*PredictContainer {
	if x != nil {
		return x.PredictContainers
	}
	return nil
}

//*
// Represents a container
type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Resource        *Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	InitialResource *Resource `protobuf:"bytes,3,opt,name=initial_resource,json=initialResource,proto3" json:"initial_resource,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{16}
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Container) GetInitialResource() *Resource {
	if x != nil {
		return x.InitialResource
	}
	return nil
}

//*
// Represents containers of a pod
type PodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containers []*Container `protobuf:"bytes,1,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (x *PodInfo) Reset() {
	*x = PodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodInfo) ProtoMessage() {}

func (x *PodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodInfo.ProtoReflect.Descriptor instead.
func (*PodInfo) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{17}
}

func (x *PodInfo) GetContainers() []*Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

//*
// Represents a request for generating predictions for pods
type CreatePredictResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredictPods []*PredictPod `protobuf:"bytes,1,rep,name=predict_pods,json=predictPods,proto3" json:"predict_pods,omitempty"`
}

func (x *CreatePredictResultRequest) Reset() {
	*x = CreatePredictResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePredictResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePredictResultRequest) ProtoMessage() {}

func (x *CreatePredictResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePredictResultRequest.ProtoReflect.Descriptor instead.
func (*CreatePredictResultRequest) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{18}
}

func (x *CreatePredictResultRequest) GetPredictPods() []*PredictPod {
	if x != nil {
		return x.PredictPods
	}
	return nil
}

//*
// Represents a response of a creating pod prediction request
type CreatePredictResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreatePredictResultResponse) Reset() {
	*x = CreatePredictResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePredictResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePredictResultResponse) ProtoMessage() {}

func (x *CreatePredictResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePredictResultResponse.ProtoReflect.Descriptor instead.
func (*CreatePredictResultResponse) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{19}
}

func (x *CreatePredictResultResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

//*
// Represents a response of getting resource info
type GetResourceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Type      ResourceType   `protobuf:"varint,2,opt,name=type,proto3,enum=containers_ai.alameda.v1alpha1.operator.ResourceType" json:"type,omitempty"`
	Uid       string         `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Namespace string         `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string         `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	PodInfo   *PodInfo       `protobuf:"bytes,6,opt,name=pod_info,json=podInfo,proto3" json:"pod_info,omitempty"`
}

func (x *GetResourceInfoResponse) Reset() {
	*x = GetResourceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceInfoResponse) ProtoMessage() {}

func (x *GetResourceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetResourceInfoResponse) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{20}
}

func (x *GetResourceInfoResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetResourceInfoResponse) GetType() ResourceType {
	if x != nil {
		return x.Type
	}
	return ResourceType_POD
}

func (x *GetResourceInfoResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetResourceInfoResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetResourceInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetResourceInfoResponse) GetPodInfo() *PodInfo {
	if x != nil {
		return x.PodInfo
	}
	return nil
}

//*
// Represents a response of getting resource recommendation
type GetResourceRecommendationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Type      ResourceType   `protobuf:"varint,2,opt,name=type,proto3,enum=containers_ai.alameda.v1alpha1.operator.ResourceType" json:"type,omitempty"`
	Uid       string         `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Namespace string         `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string         `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	PodInfo   *PodInfo       `protobuf:"bytes,6,opt,name=pod_info,json=podInfo,proto3" json:"pod_info,omitempty"`
}

func (x *GetResourceRecommendationResponse) Reset() {
	*x = GetResourceRecommendationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceRecommendationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceRecommendationResponse) ProtoMessage() {}

func (x *GetResourceRecommendationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alameda_api_v1alpha1_operator_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceRecommendationResponse.ProtoReflect.Descriptor instead.
func (*GetResourceRecommendationResponse) Descriptor() ([]byte, []int) {
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP(), []int{21}
}

func (x *GetResourceRecommendationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetResourceRecommendationResponse) GetType() ResourceType {
	if x != nil {
		return x.Type
	}
	return ResourceType_POD
}

func (x *GetResourceRecommendationResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetResourceRecommendationResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetResourceRecommendationResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetResourceRecommendationResponse) GetPodInfo() *PodInfo {
	if x != nil {
		return x.PodInfo
	}
	return nil
}

var File_alameda_api_v1alpha1_operator_server_proto protoreflect.FileDescriptor

var file_alameda_api_v1alpha1_operator_server_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d,
	0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xac, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0x77,
	0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c,
	0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x4f, 0x70, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x03, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x53, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0x92, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xae, 0x03, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61,
	0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x95, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x58, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c,
	0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x0b, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x69, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x57, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xdc, 0x03, 0x0a, 0x10, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c,
	0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x61,
	0x77, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x5c, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x7a, 0x0a,
	0x13, 0x52, 0x61, 0x77, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x50, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x11, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61,
	0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x52, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x22, 0x74, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x6f,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x50, 0x6f, 0x64, 0x73, 0x22, 0x49, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d,
	0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x08,
	0x70, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61,
	0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x70, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x6f,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61,
	0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x70, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2a, 0xaa, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x52, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x50,
	0x55, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x5f,
	0x41, 0x56, 0x47, 0x31, 0x4d, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x04, 0x2a, 0x17, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x44, 0x10, 0x00, 0x2a, 0x21, 0x0a,
	0x05, 0x53, 0x74, 0x72, 0x4f, 0x70, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01,
	0x32, 0xa9, 0x06, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61,
	0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x93, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x53, 0x75, 0x6d, 0x12, 0x3e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x43, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e,
	0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69,
	0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61,
	0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb4, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x5f, 0x61, 0x69, 0x2e, 0x61, 0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x69, 0x2e, 0x61,
	0x6c, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3c, 0x5a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x2d, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6c, 0x61,
	0x6d, 0x65, 0x64, 0x61, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_alameda_api_v1alpha1_operator_server_proto_rawDescOnce sync.Once
	file_alameda_api_v1alpha1_operator_server_proto_rawDescData = file_alameda_api_v1alpha1_operator_server_proto_rawDesc
)

func file_alameda_api_v1alpha1_operator_server_proto_rawDescGZIP() []byte {
	file_alameda_api_v1alpha1_operator_server_proto_rawDescOnce.Do(func() {
		file_alameda_api_v1alpha1_operator_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_alameda_api_v1alpha1_operator_server_proto_rawDescData)
	})
	return file_alameda_api_v1alpha1_operator_server_proto_rawDescData
}

var file_alameda_api_v1alpha1_operator_server_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_alameda_api_v1alpha1_operator_server_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_alameda_api_v1alpha1_operator_server_proto_goTypes = []interface{}{
	(MetricType)(0),                           // 0: containers_ai.alameda.v1alpha1.operator.MetricType
	(ResourceType)(0),                         // 1: containers_ai.alameda.v1alpha1.operator.ResourceType
	(StrOp)(0),                                // 2: containers_ai.alameda.v1alpha1.operator.StrOp
	(*TimeRange)(nil),                         // 3: containers_ai.alameda.v1alpha1.operator.TimeRange
	(*LabelSelector)(nil),                     // 4: containers_ai.alameda.v1alpha1.operator.LabelSelector
	(*Sample)(nil),                            // 5: containers_ai.alameda.v1alpha1.operator.Sample
	(*MetricResult)(nil),                      // 6: containers_ai.alameda.v1alpha1.operator.MetricResult
	(*ListMetricsRequest)(nil),                // 7: containers_ai.alameda.v1alpha1.operator.ListMetricsRequest
	(*ListMetricsResponse)(nil),               // 8: containers_ai.alameda.v1alpha1.operator.ListMetricsResponse
	(*ListMetricsSumRequest)(nil),             // 9: containers_ai.alameda.v1alpha1.operator.ListMetricsSumRequest
	(*ListMetricsSumResponse)(nil),            // 10: containers_ai.alameda.v1alpha1.operator.ListMetricsSumResponse
	(*GetResourceInfoRequest)(nil),            // 11: containers_ai.alameda.v1alpha1.operator.GetResourceInfoRequest
	(*GetResourceRecommendationRequest)(nil),  // 12: containers_ai.alameda.v1alpha1.operator.GetResourceRecommendationRequest
	(*Resource)(nil),                          // 13: containers_ai.alameda.v1alpha1.operator.Resource
	(*Recommendation)(nil),                    // 14: containers_ai.alameda.v1alpha1.operator.Recommendation
	(*PredictData)(nil),                       // 15: containers_ai.alameda.v1alpha1.operator.PredictData
	(*TimeSeriesData)(nil),                    // 16: containers_ai.alameda.v1alpha1.operator.TimeSeriesData
	(*PredictContainer)(nil),                  // 17: containers_ai.alameda.v1alpha1.operator.PredictContainer
	(*PredictPod)(nil),                        // 18: containers_ai.alameda.v1alpha1.operator.PredictPod
	(*Container)(nil),                         // 19: containers_ai.alameda.v1alpha1.operator.Container
	(*PodInfo)(nil),                           // 20: containers_ai.alameda.v1alpha1.operator.PodInfo
	(*CreatePredictResultRequest)(nil),        // 21: containers_ai.alameda.v1alpha1.operator.CreatePredictResultRequest
	(*CreatePredictResultResponse)(nil),       // 22: containers_ai.alameda.v1alpha1.operator.CreatePredictResultResponse
	(*GetResourceInfoResponse)(nil),           // 23: containers_ai.alameda.v1alpha1.operator.GetResourceInfoResponse
	(*GetResourceRecommendationResponse)(nil), // 24: containers_ai.alameda.v1alpha1.operator.GetResourceRecommendationResponse
	nil,                         // 25: containers_ai.alameda.v1alpha1.operator.MetricResult.LabelsEntry
	nil,                         // 26: containers_ai.alameda.v1alpha1.operator.Resource.LimitEntry
	nil,                         // 27: containers_ai.alameda.v1alpha1.operator.Resource.RequestEntry
	nil,                         // 28: containers_ai.alameda.v1alpha1.operator.PredictContainer.RawPredictDataEntry
	(*timestamp.Timestamp)(nil), // 29: google.protobuf.Timestamp
	(*duration.Duration)(nil),   // 30: google.protobuf.Duration
	(*status.Status)(nil),       // 31: google.rpc.Status
}
var file_alameda_api_v1alpha1_operator_server_proto_depIdxs = []int32{
	29, // 0: containers_ai.alameda.v1alpha1.operator.TimeRange.start_time:type_name -> google.protobuf.Timestamp
	29, // 1: containers_ai.alameda.v1alpha1.operator.TimeRange.end_time:type_name -> google.protobuf.Timestamp
	30, // 2: containers_ai.alameda.v1alpha1.operator.TimeRange.step:type_name -> google.protobuf.Duration
	2,  // 3: containers_ai.alameda.v1alpha1.operator.LabelSelector.op:type_name -> containers_ai.alameda.v1alpha1.operator.StrOp
	29, // 4: containers_ai.alameda.v1alpha1.operator.Sample.time:type_name -> google.protobuf.Timestamp
	25, // 5: containers_ai.alameda.v1alpha1.operator.MetricResult.labels:type_name -> containers_ai.alameda.v1alpha1.operator.MetricResult.LabelsEntry
	5,  // 6: containers_ai.alameda.v1alpha1.operator.MetricResult.samples:type_name -> containers_ai.alameda.v1alpha1.operator.Sample
	0,  // 7: containers_ai.alameda.v1alpha1.operator.ListMetricsRequest.metric_type:type_name -> containers_ai.alameda.v1alpha1.operator.MetricType
	29, // 8: containers_ai.alameda.v1alpha1.operator.ListMetricsRequest.time:type_name -> google.protobuf.Timestamp
	30, // 9: containers_ai.alameda.v1alpha1.operator.ListMetricsRequest.duration:type_name -> google.protobuf.Duration
	3,  // 10: containers_ai.alameda.v1alpha1.operator.ListMetricsRequest.time_range:type_name -> containers_ai.alameda.v1alpha1.operator.TimeRange
	4,  // 11: containers_ai.alameda.v1alpha1.operator.ListMetricsRequest.conditions:type_name -> containers_ai.alameda.v1alpha1.operator.LabelSelector
	6,  // 12: containers_ai.alameda.v1alpha1.operator.ListMetricsResponse.metrics:type_name -> containers_ai.alameda.v1alpha1.operator.MetricResult
	31, // 13: containers_ai.alameda.v1alpha1.operator.ListMetricsResponse.status:type_name -> google.rpc.Status
	0,  // 14: containers_ai.alameda.v1alpha1.operator.ListMetricsSumRequest.metric_type:type_name -> containers_ai.alameda.v1alpha1.operator.MetricType
	29, // 15: containers_ai.alameda.v1alpha1.operator.ListMetricsSumRequest.time:type_name -> google.protobuf.Timestamp
	30, // 16: containers_ai.alameda.v1alpha1.operator.ListMetricsSumRequest.duration:type_name -> google.protobuf.Duration
	3,  // 17: containers_ai.alameda.v1alpha1.operator.ListMetricsSumRequest.time_range:type_name -> containers_ai.alameda.v1alpha1.operator.TimeRange
	4,  // 18: containers_ai.alameda.v1alpha1.operator.ListMetricsSumRequest.conditions:type_name -> containers_ai.alameda.v1alpha1.operator.LabelSelector
	6,  // 19: containers_ai.alameda.v1alpha1.operator.ListMetricsSumResponse.metrics:type_name -> containers_ai.alameda.v1alpha1.operator.MetricResult
	31, // 20: containers_ai.alameda.v1alpha1.operator.ListMetricsSumResponse.status:type_name -> google.rpc.Status
	1,  // 21: containers_ai.alameda.v1alpha1.operator.GetResourceInfoRequest.type:type_name -> containers_ai.alameda.v1alpha1.operator.ResourceType
	1,  // 22: containers_ai.alameda.v1alpha1.operator.GetResourceRecommendationRequest.type:type_name -> containers_ai.alameda.v1alpha1.operator.ResourceType
	26, // 23: containers_ai.alameda.v1alpha1.operator.Resource.limit:type_name -> containers_ai.alameda.v1alpha1.operator.Resource.LimitEntry
	27, // 24: containers_ai.alameda.v1alpha1.operator.Resource.request:type_name -> containers_ai.alameda.v1alpha1.operator.Resource.RequestEntry
	29, // 25: containers_ai.alameda.v1alpha1.operator.Recommendation.time:type_name -> google.protobuf.Timestamp
	13, // 26: containers_ai.alameda.v1alpha1.operator.Recommendation.resource:type_name -> containers_ai.alameda.v1alpha1.operator.Resource
	29, // 27: containers_ai.alameda.v1alpha1.operator.PredictData.time:type_name -> google.protobuf.Timestamp
	15, // 28: containers_ai.alameda.v1alpha1.operator.TimeSeriesData.predict_data:type_name -> containers_ai.alameda.v1alpha1.operator.PredictData
	28, // 29: containers_ai.alameda.v1alpha1.operator.PredictContainer.raw_predict_data:type_name -> containers_ai.alameda.v1alpha1.operator.PredictContainer.RawPredictDataEntry
	14, // 30: containers_ai.alameda.v1alpha1.operator.PredictContainer.recommendations:type_name -> containers_ai.alameda.v1alpha1.operator.Recommendation
	13, // 31: containers_ai.alameda.v1alpha1.operator.PredictContainer.initial_resource:type_name -> containers_ai.alameda.v1alpha1.operator.Resource
	17, // 32: containers_ai.alameda.v1alpha1.operator.PredictPod.predict_containers:type_name -> containers_ai.alameda.v1alpha1.operator.PredictContainer
	13, // 33: containers_ai.alameda.v1alpha1.operator.Container.resource:type_name -> containers_ai.alameda.v1alpha1.operator.Resource
	13, // 34: containers_ai.alameda.v1alpha1.operator.Container.initial_resource:type_name -> containers_ai.alameda.v1alpha1.operator.Resource
	19, // 35: containers_ai.alameda.v1alpha1.operator.PodInfo.containers:type_name -> containers_ai.alameda.v1alpha1.operator.Container
	18, // 36: containers_ai.alameda.v1alpha1.operator.CreatePredictResultRequest.predict_pods:type_name -> containers_ai.alameda.v1alpha1.operator.PredictPod
	31, // 37: containers_ai.alameda.v1alpha1.operator.CreatePredictResultResponse.status:type_name -> google.rpc.Status
	31, // 38: containers_ai.alameda.v1alpha1.operator.GetResourceInfoResponse.status:type_name -> google.rpc.Status
	1,  // 39: containers_ai.alameda.v1alpha1.operator.GetResourceInfoResponse.type:type_name -> containers_ai.alameda.v1alpha1.operator.ResourceType
	20, // 40: containers_ai.alameda.v1alpha1.operator.GetResourceInfoResponse.pod_info:type_name -> containers_ai.alameda.v1alpha1.operator.PodInfo
	31, // 41: containers_ai.alameda.v1alpha1.operator.GetResourceRecommendationResponse.status:type_name -> google.rpc.Status
	1,  // 42: containers_ai.alameda.v1alpha1.operator.GetResourceRecommendationResponse.type:type_name -> containers_ai.alameda.v1alpha1.operator.ResourceType
	20, // 43: containers_ai.alameda.v1alpha1.operator.GetResourceRecommendationResponse.pod_info:type_name -> containers_ai.alameda.v1alpha1.operator.PodInfo
	16, // 44: containers_ai.alameda.v1alpha1.operator.PredictContainer.RawPredictDataEntry.value:type_name -> containers_ai.alameda.v1alpha1.operator.TimeSeriesData
	7,  // 45: containers_ai.alameda.v1alpha1.operator.OperatorService.ListMetrics:input_type -> containers_ai.alameda.v1alpha1.operator.ListMetricsRequest
	9,  // 46: containers_ai.alameda.v1alpha1.operator.OperatorService.ListMetricsSum:input_type -> containers_ai.alameda.v1alpha1.operator.ListMetricsSumRequest
	21, // 47: containers_ai.alameda.v1alpha1.operator.OperatorService.CreatePredictResult:input_type -> containers_ai.alameda.v1alpha1.operator.CreatePredictResultRequest
	11, // 48: containers_ai.alameda.v1alpha1.operator.OperatorService.GetResourceInfo:input_type -> containers_ai.alameda.v1alpha1.operator.GetResourceInfoRequest
	12, // 49: containers_ai.alameda.v1alpha1.operator.OperatorService.GetResourceRecommendation:input_type -> containers_ai.alameda.v1alpha1.operator.GetResourceRecommendationRequest
	8,  // 50: containers_ai.alameda.v1alpha1.operator.OperatorService.ListMetrics:output_type -> containers_ai.alameda.v1alpha1.operator.ListMetricsResponse
	10, // 51: containers_ai.alameda.v1alpha1.operator.OperatorService.ListMetricsSum:output_type -> containers_ai.alameda.v1alpha1.operator.ListMetricsSumResponse
	22, // 52: containers_ai.alameda.v1alpha1.operator.OperatorService.CreatePredictResult:output_type -> containers_ai.alameda.v1alpha1.operator.CreatePredictResultResponse
	23, // 53: containers_ai.alameda.v1alpha1.operator.OperatorService.GetResourceInfo:output_type -> containers_ai.alameda.v1alpha1.operator.GetResourceInfoResponse
	24, // 54: containers_ai.alameda.v1alpha1.operator.OperatorService.GetResourceRecommendation:output_type -> containers_ai.alameda.v1alpha1.operator.GetResourceRecommendationResponse
	50, // [50:55] is the sub-list for method output_type
	45, // [45:50] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_alameda_api_v1alpha1_operator_server_proto_init() }
func file_alameda_api_v1alpha1_operator_server_proto_init() {
	if File_alameda_api_v1alpha1_operator_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricsSumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricsSumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceRecommendationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictPod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePredictResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePredictResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alameda_api_v1alpha1_operator_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceRecommendationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_alameda_api_v1alpha1_operator_server_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ListMetricsRequest_Time)(nil),
		(*ListMetricsRequest_Duration)(nil),
		(*ListMetricsRequest_TimeRange)(nil),
	}
	file_alameda_api_v1alpha1_operator_server_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ListMetricsSumRequest_Time)(nil),
		(*ListMetricsSumRequest_Duration)(nil),
		(*ListMetricsSumRequest_TimeRange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_alameda_api_v1alpha1_operator_server_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_alameda_api_v1alpha1_operator_server_proto_goTypes,
		DependencyIndexes: file_alameda_api_v1alpha1_operator_server_proto_depIdxs,
		EnumInfos:         file_alameda_api_v1alpha1_operator_server_proto_enumTypes,
		MessageInfos:      file_alameda_api_v1alpha1_operator_server_proto_msgTypes,
	}.Build()
	File_alameda_api_v1alpha1_operator_server_proto = out.File
	file_alameda_api_v1alpha1_operator_server_proto_rawDesc = nil
	file_alameda_api_v1alpha1_operator_server_proto_goTypes = nil
	file_alameda_api_v1alpha1_operator_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OperatorServiceClient is the client API for OperatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OperatorServiceClient interface {
	/// Used to list metric data
	ListMetrics(ctx context.Context, in *ListMetricsRequest, opts ...grpc.CallOption) (*ListMetricsResponse, error)
	/// Used to list summation of metric data
	ListMetricsSum(ctx context.Context, in *ListMetricsSumRequest, opts ...grpc.CallOption) (*ListMetricsSumResponse, error)
	/// Used to requst for creating prediction results
	CreatePredictResult(ctx context.Context, in *CreatePredictResultRequest, opts ...grpc.CallOption) (*CreatePredictResultResponse, error)
	/// Used to get resource data
	GetResourceInfo(ctx context.Context, in *GetResourceInfoRequest, opts ...grpc.CallOption) (*GetResourceInfoResponse, error)
	/// Used to get resource recommendation
	GetResourceRecommendation(ctx context.Context, in *GetResourceRecommendationRequest, opts ...grpc.CallOption) (*GetResourceRecommendationResponse, error)
}

type operatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorServiceClient(cc grpc.ClientConnInterface) OperatorServiceClient {
	return &operatorServiceClient{cc}
}

func (c *operatorServiceClient) ListMetrics(ctx context.Context, in *ListMetricsRequest, opts ...grpc.CallOption) (*ListMetricsResponse, error) {
	out := new(ListMetricsResponse)
	err := c.cc.Invoke(ctx, "/containers_ai.alameda.v1alpha1.operator.OperatorService/ListMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListMetricsSum(ctx context.Context, in *ListMetricsSumRequest, opts ...grpc.CallOption) (*ListMetricsSumResponse, error) {
	out := new(ListMetricsSumResponse)
	err := c.cc.Invoke(ctx, "/containers_ai.alameda.v1alpha1.operator.OperatorService/ListMetricsSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) CreatePredictResult(ctx context.Context, in *CreatePredictResultRequest, opts ...grpc.CallOption) (*CreatePredictResultResponse, error) {
	out := new(CreatePredictResultResponse)
	err := c.cc.Invoke(ctx, "/containers_ai.alameda.v1alpha1.operator.OperatorService/CreatePredictResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetResourceInfo(ctx context.Context, in *GetResourceInfoRequest, opts ...grpc.CallOption) (*GetResourceInfoResponse, error) {
	out := new(GetResourceInfoResponse)
	err := c.cc.Invoke(ctx, "/containers_ai.alameda.v1alpha1.operator.OperatorService/GetResourceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetResourceRecommendation(ctx context.Context, in *GetResourceRecommendationRequest, opts ...grpc.CallOption) (*GetResourceRecommendationResponse, error) {
	out := new(GetResourceRecommendationResponse)
	err := c.cc.Invoke(ctx, "/containers_ai.alameda.v1alpha1.operator.OperatorService/GetResourceRecommendation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServiceServer is the server API for OperatorService service.
type OperatorServiceServer interface {
	/// Used to list metric data
	ListMetrics(context.Context, *ListMetricsRequest) (*ListMetricsResponse, error)
	/// Used to list summation of metric data
	ListMetricsSum(context.Context, *ListMetricsSumRequest) (*ListMetricsSumResponse, error)
	/// Used to requst for creating prediction results
	CreatePredictResult(context.Context, *CreatePredictResultRequest) (*CreatePredictResultResponse, error)
	/// Used to get resource data
	GetResourceInfo(context.Context, *GetResourceInfoRequest) (*GetResourceInfoResponse, error)
	/// Used to get resource recommendation
	GetResourceRecommendation(context.Context, *GetResourceRecommendationRequest) (*GetResourceRecommendationResponse, error)
}

// UnimplementedOperatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOperatorServiceServer struct {
}

func (*UnimplementedOperatorServiceServer) ListMetrics(context.Context, *ListMetricsRequest) (*ListMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMetrics not implemented")
}
func (*UnimplementedOperatorServiceServer) ListMetricsSum(context.Context, *ListMetricsSumRequest) (*ListMetricsSumResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMetricsSum not implemented")
}
func (*UnimplementedOperatorServiceServer) CreatePredictResult(context.Context, *CreatePredictResultRequest) (*CreatePredictResultResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePredictResult not implemented")
}
func (*UnimplementedOperatorServiceServer) GetResourceInfo(context.Context, *GetResourceInfoRequest) (*GetResourceInfoResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetResourceInfo not implemented")
}
func (*UnimplementedOperatorServiceServer) GetResourceRecommendation(context.Context, *GetResourceRecommendationRequest) (*GetResourceRecommendationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetResourceRecommendation not implemented")
}

func RegisterOperatorServiceServer(s *grpc.Server, srv OperatorServiceServer) {
	s.RegisterService(&_OperatorService_serviceDesc, srv)
}

func _OperatorService_ListMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containers_ai.alameda.v1alpha1.operator.OperatorService/ListMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListMetrics(ctx, req.(*ListMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListMetricsSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricsSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListMetricsSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containers_ai.alameda.v1alpha1.operator.OperatorService/ListMetricsSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListMetricsSum(ctx, req.(*ListMetricsSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_CreatePredictResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePredictResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).CreatePredictResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containers_ai.alameda.v1alpha1.operator.OperatorService/CreatePredictResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).CreatePredictResult(ctx, req.(*CreatePredictResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetResourceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetResourceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containers_ai.alameda.v1alpha1.operator.OperatorService/GetResourceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetResourceInfo(ctx, req.(*GetResourceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetResourceRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetResourceRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containers_ai.alameda.v1alpha1.operator.OperatorService/GetResourceRecommendation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetResourceRecommendation(ctx, req.(*GetResourceRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OperatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "containers_ai.alameda.v1alpha1.operator.OperatorService",
	HandlerType: (*OperatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMetrics",
			Handler:    _OperatorService_ListMetrics_Handler,
		},
		{
			MethodName: "ListMetricsSum",
			Handler:    _OperatorService_ListMetricsSum_Handler,
		},
		{
			MethodName: "CreatePredictResult",
			Handler:    _OperatorService_CreatePredictResult_Handler,
		},
		{
			MethodName: "GetResourceInfo",
			Handler:    _OperatorService_GetResourceInfo_Handler,
		},
		{
			MethodName: "GetResourceRecommendation",
			Handler:    _OperatorService_GetResourceRecommendation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alameda_api/v1alpha1/operator/server.proto",
}
