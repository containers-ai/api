// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alameda_api/v1alpha1/datahub/metric.proto

package containers_ai_alameda_v1alpha1_datahub

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ContainerMetricType int32

const (
	ContainerMetricType_CONTAINER_METRICTYPE_UNDEFINED         ContainerMetricType = 0
	ContainerMetricType_CONTAINER_CPU_USAGE_SECONDS_PERCENTAGE ContainerMetricType = 1
	ContainerMetricType_CONTAINER_MEMORY_USAGE_BYTES           ContainerMetricType = 2
)

var ContainerMetricType_name = map[int32]string{
	0: "CONTAINER_METRICTYPE_UNDEFINED",
	1: "CONTAINER_CPU_USAGE_SECONDS_PERCENTAGE",
	2: "CONTAINER_MEMORY_USAGE_BYTES",
}
var ContainerMetricType_value = map[string]int32{
	"CONTAINER_METRICTYPE_UNDEFINED":         0,
	"CONTAINER_CPU_USAGE_SECONDS_PERCENTAGE": 1,
	"CONTAINER_MEMORY_USAGE_BYTES":           2,
}

func (x ContainerMetricType) String() string {
	return proto.EnumName(ContainerMetricType_name, int32(x))
}
func (ContainerMetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_metric_20705b7d642616d0, []int{0}
}

type NodeMetricType int32

const (
	NodeMetricType_NODE_METRICTYPE_UNDEFINED         NodeMetricType = 0
	NodeMetricType_NODE_CPU_USAGE_SECONDS_PERCENTAGE NodeMetricType = 1
	NodeMetricType_NODE_MEMORY_USAGE_BYTES           NodeMetricType = 2
)

var NodeMetricType_name = map[int32]string{
	0: "NODE_METRICTYPE_UNDEFINED",
	1: "NODE_CPU_USAGE_SECONDS_PERCENTAGE",
	2: "NODE_MEMORY_USAGE_BYTES",
}
var NodeMetricType_value = map[string]int32{
	"NODE_METRICTYPE_UNDEFINED":         0,
	"NODE_CPU_USAGE_SECONDS_PERCENTAGE": 1,
	"NODE_MEMORY_USAGE_BYTES":           2,
}

func (x NodeMetricType) String() string {
	return proto.EnumName(NodeMetricType_name, int32(x))
}
func (NodeMetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_metric_20705b7d642616d0, []int{1}
}

type StrOp int32

const (
	StrOp_Equal    StrOp = 0
	StrOp_NotEqual StrOp = 1
)

var StrOp_name = map[int32]string{
	0: "Equal",
	1: "NotEqual",
}
var StrOp_value = map[string]int32{
	"Equal":    0,
	"NotEqual": 1,
}

func (x StrOp) String() string {
	return proto.EnumName(StrOp_name, int32(x))
}
func (StrOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_metric_20705b7d642616d0, []int{2}
}

type Sample struct {
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Sample_DoubleValue
	//	*Sample_StringValue
	Value                isSample_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_metric_20705b7d642616d0, []int{0}
}
func (m *Sample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sample.Unmarshal(m, b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
}
func (dst *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(dst, src)
}
func (m *Sample) XXX_Size() int {
	return xxx_messageInfo_Sample.Size(m)
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type isSample_Value interface {
	isSample_Value()
}

type Sample_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Sample_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*Sample_DoubleValue) isSample_Value() {}

func (*Sample_StringValue) isSample_Value() {}

func (m *Sample) GetValue() isSample_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Sample) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*Sample_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Sample) GetStringValue() string {
	if x, ok := m.GetValue().(*Sample_StringValue); ok {
		return x.StringValue
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Sample) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Sample_OneofMarshaler, _Sample_OneofUnmarshaler, _Sample_OneofSizer, []interface{}{
		(*Sample_DoubleValue)(nil),
		(*Sample_StringValue)(nil),
	}
}

func _Sample_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Sample)
	// value
	switch x := m.Value.(type) {
	case *Sample_DoubleValue:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *Sample_StringValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case nil:
	default:
		return fmt.Errorf("Sample.Value has unexpected type %T", x)
	}
	return nil
}

func _Sample_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Sample)
	switch tag {
	case 2: // value.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Sample_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 3: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Sample_StringValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _Sample_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Sample)
	// value
	switch x := m.Value.(type) {
	case *Sample_DoubleValue:
		n += 1 // tag and wire
		n += 8
	case *Sample_StringValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MetricResult struct {
	Labels               map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Samples              []*Sample         `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MetricResult) Reset()         { *m = MetricResult{} }
func (m *MetricResult) String() string { return proto.CompactTextString(m) }
func (*MetricResult) ProtoMessage()    {}
func (*MetricResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_metric_20705b7d642616d0, []int{1}
}
func (m *MetricResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricResult.Unmarshal(m, b)
}
func (m *MetricResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricResult.Marshal(b, m, deterministic)
}
func (dst *MetricResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricResult.Merge(dst, src)
}
func (m *MetricResult) XXX_Size() int {
	return xxx_messageInfo_MetricResult.Size(m)
}
func (m *MetricResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricResult.DiscardUnknown(m)
}

var xxx_messageInfo_MetricResult proto.InternalMessageInfo

func (m *MetricResult) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricResult) GetSamples() []*Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

type TimeRange struct {
	StartTime            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Step                 *duration.Duration   `protobuf:"bytes,3,opt,name=step,proto3" json:"step,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TimeRange) Reset()         { *m = TimeRange{} }
func (m *TimeRange) String() string { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()    {}
func (*TimeRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_metric_20705b7d642616d0, []int{2}
}
func (m *TimeRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeRange.Unmarshal(m, b)
}
func (m *TimeRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeRange.Marshal(b, m, deterministic)
}
func (dst *TimeRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeRange.Merge(dst, src)
}
func (m *TimeRange) XXX_Size() int {
	return xxx_messageInfo_TimeRange.Size(m)
}
func (m *TimeRange) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeRange.DiscardUnknown(m)
}

var xxx_messageInfo_TimeRange proto.InternalMessageInfo

func (m *TimeRange) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TimeRange) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *TimeRange) GetStep() *duration.Duration {
	if m != nil {
		return m.Step
	}
	return nil
}

type LabelSelector struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Op                   StrOp    `protobuf:"varint,2,opt,name=op,proto3,enum=containers_ai.alameda.v1alpha1.datahub.StrOp" json:"op,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelSelector) Reset()         { *m = LabelSelector{} }
func (m *LabelSelector) String() string { return proto.CompactTextString(m) }
func (*LabelSelector) ProtoMessage()    {}
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_metric_20705b7d642616d0, []int{3}
}
func (m *LabelSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelSelector.Unmarshal(m, b)
}
func (m *LabelSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelSelector.Marshal(b, m, deterministic)
}
func (dst *LabelSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelSelector.Merge(dst, src)
}
func (m *LabelSelector) XXX_Size() int {
	return xxx_messageInfo_LabelSelector.Size(m)
}
func (m *LabelSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelSelector.DiscardUnknown(m)
}

var xxx_messageInfo_LabelSelector proto.InternalMessageInfo

func (m *LabelSelector) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LabelSelector) GetOp() StrOp {
	if m != nil {
		return m.Op
	}
	return StrOp_Equal
}

func (m *LabelSelector) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Sample)(nil), "containers_ai.alameda.v1alpha1.datahub.Sample")
	proto.RegisterType((*MetricResult)(nil), "containers_ai.alameda.v1alpha1.datahub.MetricResult")
	proto.RegisterMapType((map[string]string)(nil), "containers_ai.alameda.v1alpha1.datahub.MetricResult.LabelsEntry")
	proto.RegisterType((*TimeRange)(nil), "containers_ai.alameda.v1alpha1.datahub.TimeRange")
	proto.RegisterType((*LabelSelector)(nil), "containers_ai.alameda.v1alpha1.datahub.LabelSelector")
	proto.RegisterEnum("containers_ai.alameda.v1alpha1.datahub.ContainerMetricType", ContainerMetricType_name, ContainerMetricType_value)
	proto.RegisterEnum("containers_ai.alameda.v1alpha1.datahub.NodeMetricType", NodeMetricType_name, NodeMetricType_value)
	proto.RegisterEnum("containers_ai.alameda.v1alpha1.datahub.StrOp", StrOp_name, StrOp_value)
}

func init() {
	proto.RegisterFile("alameda_api/v1alpha1/datahub/metric.proto", fileDescriptor_metric_20705b7d642616d0)
}

var fileDescriptor_metric_20705b7d642616d0 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xef, 0x6e, 0xd3, 0x3c,
	0x14, 0xc6, 0xe7, 0x74, 0xff, 0x72, 0xba, 0x77, 0xaa, 0xfc, 0x22, 0xd1, 0x15, 0x18, 0xa1, 0x88,
	0xa9, 0x4c, 0x9a, 0xab, 0x15, 0x21, 0x31, 0x24, 0x24, 0xb6, 0xd4, 0x6c, 0x93, 0x58, 0x3a, 0x39,
	0x19, 0x62, 0x9f, 0x22, 0xb7, 0x31, 0x5d, 0x44, 0x1a, 0x87, 0xc4, 0xa9, 0xd4, 0x2b, 0xe0, 0x03,
	0xb7, 0xc2, 0xad, 0x71, 0x0f, 0x28, 0x4e, 0xaa, 0x55, 0x30, 0xb4, 0x7e, 0x8b, 0x7d, 0x9e, 0xdf,
	0x73, 0x7c, 0x9e, 0x13, 0x78, 0xc9, 0x23, 0x3e, 0x11, 0x01, 0xf7, 0x79, 0x12, 0x76, 0xa7, 0x87,
	0x3c, 0x4a, 0x6e, 0xf8, 0x61, 0x37, 0xe0, 0x8a, 0xdf, 0xe4, 0xc3, 0xee, 0x44, 0xa8, 0x34, 0x1c,
	0x91, 0x24, 0x95, 0x4a, 0xe2, 0xbd, 0x91, 0x8c, 0x15, 0x0f, 0x63, 0x91, 0x66, 0x3e, 0x0f, 0x49,
	0x05, 0x92, 0x39, 0x44, 0x2a, 0xa8, 0xf5, 0x74, 0x2c, 0xe5, 0x38, 0x12, 0x5d, 0x4d, 0x0d, 0xf3,
	0x2f, 0x5d, 0x15, 0x4e, 0x44, 0xa6, 0xf8, 0x24, 0x29, 0x8d, 0x5a, 0xbb, 0x7f, 0x0a, 0x82, 0x3c,
	0xe5, 0x2a, 0x94, 0x71, 0x59, 0x6f, 0xff, 0x40, 0xb0, 0xee, 0xf2, 0x49, 0x12, 0x09, 0x4c, 0x60,
	0xb5, 0xa0, 0x9b, 0xc8, 0x42, 0x9d, 0x7a, 0xaf, 0x45, 0x4a, 0x92, 0xcc, 0x49, 0xe2, 0xcd, 0xad,
	0x99, 0xd6, 0xe1, 0xe7, 0xb0, 0x15, 0xc8, 0x7c, 0x18, 0x09, 0x7f, 0xca, 0xa3, 0x5c, 0x34, 0x0d,
	0x0b, 0x75, 0xd0, 0xd9, 0x0a, 0xab, 0x97, 0xb7, 0x9f, 0x8a, 0xcb, 0x42, 0x94, 0xa9, 0x34, 0x8c,
	0xc7, 0x95, 0xa8, 0x66, 0xa1, 0x8e, 0x59, 0x88, 0xca, 0x5b, 0x2d, 0x3a, 0xd9, 0x80, 0x35, 0x5d,
	0x6d, 0xff, 0x42, 0xb0, 0x75, 0xa1, 0x73, 0x60, 0x22, 0xcb, 0x23, 0x85, 0x3f, 0xc3, 0x7a, 0xc4,
	0x87, 0x22, 0xca, 0x9a, 0xc8, 0xaa, 0x75, 0xea, 0xbd, 0xf7, 0x64, 0xb9, 0x60, 0xc8, 0xa2, 0x0b,
	0xf9, 0xa8, 0x2d, 0x68, 0xac, 0xd2, 0x19, 0xab, 0xfc, 0xf0, 0x19, 0x6c, 0x64, 0x7a, 0xee, 0xac,
	0x69, 0x68, 0x6b, 0xb2, 0xac, 0x75, 0x19, 0x17, 0x9b, 0xe3, 0xad, 0x23, 0xa8, 0x2f, 0x34, 0xc0,
	0x0d, 0xa8, 0x7d, 0x15, 0x33, 0x9d, 0xa2, 0xc9, 0x8a, 0x4f, 0xfc, 0xa0, 0x1a, 0x4f, 0x27, 0x64,
	0xb2, 0xf2, 0xf0, 0xd6, 0x78, 0x83, 0xda, 0x3f, 0x11, 0x98, 0x45, 0xac, 0x8c, 0xc7, 0x63, 0x81,
	0x8f, 0x00, 0x32, 0xc5, 0x53, 0xe5, 0x2f, 0xb9, 0x06, 0x53, 0xab, 0x8b, 0x33, 0x7e, 0x0d, 0x9b,
	0x22, 0x0e, 0x4a, 0xd0, 0xb8, 0x17, 0xdc, 0x10, 0x71, 0xa0, 0xb1, 0x03, 0x58, 0xcd, 0x94, 0x48,
	0xf4, 0x56, 0xea, 0xbd, 0x9d, 0xbf, 0x90, 0x7e, 0xf5, 0xb3, 0x30, 0x2d, 0x6b, 0x4f, 0xe1, 0x3f,
	0x3d, 0xa9, 0x2b, 0x22, 0x31, 0x52, 0x32, 0xbd, 0x63, 0xd6, 0x77, 0x60, 0xc8, 0x44, 0x3f, 0x61,
	0xbb, 0x77, 0xb0, 0x74, 0xa2, 0x2a, 0x1d, 0x24, 0xcc, 0x90, 0xc9, 0x6d, 0x54, 0xb5, 0x85, 0xa8,
	0xf6, 0xbf, 0x23, 0xf8, 0xdf, 0x9e, 0x5b, 0x95, 0x9b, 0xf5, 0x66, 0x89, 0xc0, 0x6d, 0xd8, 0xb5,
	0x07, 0x8e, 0x77, 0x7c, 0xee, 0x50, 0xe6, 0x5f, 0x50, 0x8f, 0x9d, 0xdb, 0xde, 0xf5, 0x25, 0xf5,
	0xaf, 0x9c, 0x3e, 0xfd, 0x70, 0xee, 0xd0, 0x7e, 0x63, 0x05, 0xef, 0xc3, 0xde, 0xad, 0xc6, 0xbe,
	0xbc, 0xf2, 0xaf, 0xdc, 0xe3, 0x53, 0xea, 0xbb, 0xd4, 0x1e, 0x38, 0x7d, 0xd7, 0xbf, 0xa4, 0xcc,
	0xa6, 0x8e, 0x77, 0x7c, 0x4a, 0x1b, 0x08, 0x5b, 0xf0, 0x78, 0xd1, 0xef, 0x62, 0xc0, 0xae, 0x2b,
	0xf9, 0xc9, 0xb5, 0x47, 0xdd, 0x86, 0xb1, 0x9f, 0xc1, 0xb6, 0x23, 0x03, 0xb1, 0xf0, 0x86, 0x27,
	0xb0, 0xe3, 0x0c, 0xfa, 0xf4, 0x5f, 0xed, 0x5f, 0xc0, 0x33, 0x5d, 0xbe, 0xa7, 0xf3, 0x23, 0x78,
	0x58, 0xb9, 0xdc, 0xd1, 0xd4, 0x82, 0x35, 0x9d, 0x10, 0x36, 0x61, 0x8d, 0x7e, 0xcb, 0x79, 0xd4,
	0x58, 0xc1, 0x5b, 0xb0, 0xe9, 0x48, 0x55, 0x9e, 0xd0, 0x70, 0x5d, 0x6f, 0xec, 0xd5, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x6e, 0x84, 0x0a, 0x1d, 0x62, 0x04, 0x00, 0x00,
}
