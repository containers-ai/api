// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alameda_api/v1alpha1/datahub/schemas/types.proto

package schemas

import (
	fmt "fmt"
	common "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/common"
	common1 "github.com/containers-ai/api/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Table int32

const (
	Table_TABLE_UNDEFINED      Table = 0
	Table_TABLE_APPLICATION    Table = 1
	Table_TABLE_METRIC         Table = 2
	Table_TABLE_PLANNING       Table = 3
	Table_TABLE_PREDICTION     Table = 4
	Table_TABLE_RECOMMENDATION Table = 5
	Table_TABLE_RESOURCE       Table = 6
)

var Table_name = map[int32]string{
	0: "TABLE_UNDEFINED",
	1: "TABLE_APPLICATION",
	2: "TABLE_METRIC",
	3: "TABLE_PLANNING",
	4: "TABLE_PREDICTION",
	5: "TABLE_RECOMMENDATION",
	6: "TABLE_RESOURCE",
}

var Table_value = map[string]int32{
	"TABLE_UNDEFINED":      0,
	"TABLE_APPLICATION":    1,
	"TABLE_METRIC":         2,
	"TABLE_PLANNING":       3,
	"TABLE_PREDICTION":     4,
	"TABLE_RECOMMENDATION": 5,
	"TABLE_RESOURCE":       6,
}

func (x Table) String() string {
	return proto.EnumName(Table_name, int32(x))
}

func (Table) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01194bf23370964f, []int{0}
}

type SchemaMeta struct {
	Table                Table    `protobuf:"varint,1,opt,name=table,proto3,enum=containersai.alameda.v1alpha1.datahub.schemas.Table" json:"table,omitempty"`
	Category             string   `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaMeta) Reset()         { *m = SchemaMeta{} }
func (m *SchemaMeta) String() string { return proto.CompactTextString(m) }
func (*SchemaMeta) ProtoMessage()    {}
func (*SchemaMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_01194bf23370964f, []int{0}
}

func (m *SchemaMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaMeta.Unmarshal(m, b)
}
func (m *SchemaMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaMeta.Marshal(b, m, deterministic)
}
func (m *SchemaMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaMeta.Merge(m, src)
}
func (m *SchemaMeta) XXX_Size() int {
	return xxx_messageInfo_SchemaMeta.Size(m)
}
func (m *SchemaMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaMeta proto.InternalMessageInfo

func (m *SchemaMeta) GetTable() Table {
	if m != nil {
		return m.Table
	}
	return Table_TABLE_UNDEFINED
}

func (m *SchemaMeta) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *SchemaMeta) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Measurement struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MetricType           common.MetricType `protobuf:"varint,2,opt,name=metric_type,json=metricType,proto3,enum=containersai.alameda.v1alpha1.datahub.common.MetricType" json:"metric_type,omitempty"`
	Columns              []*Column         `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Measurement) Reset()         { *m = Measurement{} }
func (m *Measurement) String() string { return proto.CompactTextString(m) }
func (*Measurement) ProtoMessage()    {}
func (*Measurement) Descriptor() ([]byte, []int) {
	return fileDescriptor_01194bf23370964f, []int{1}
}

func (m *Measurement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Measurement.Unmarshal(m, b)
}
func (m *Measurement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Measurement.Marshal(b, m, deterministic)
}
func (m *Measurement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Measurement.Merge(m, src)
}
func (m *Measurement) XXX_Size() int {
	return xxx_messageInfo_Measurement.Size(m)
}
func (m *Measurement) XXX_DiscardUnknown() {
	xxx_messageInfo_Measurement.DiscardUnknown(m)
}

var xxx_messageInfo_Measurement proto.InternalMessageInfo

func (m *Measurement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Measurement) GetMetricType() common.MetricType {
	if m != nil {
		return m.MetricType
	}
	return common.MetricType_METRICS_TYPE_UNDEFINED
}

func (m *Measurement) GetColumns() []*Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

type Column struct {
	Name                 string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Required             bool               `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	ColumnTypes          common1.ColumnType `protobuf:"varint,3,opt,name=column_types,json=columnTypes,proto3,enum=containersai.common.ColumnType" json:"column_types,omitempty"`
	DataTypes            common1.DataType   `protobuf:"varint,4,opt,name=data_types,json=dataTypes,proto3,enum=containersai.common.DataType" json:"data_types,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Column) Reset()         { *m = Column{} }
func (m *Column) String() string { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()    {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_01194bf23370964f, []int{2}
}

func (m *Column) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Column.Unmarshal(m, b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Column.Marshal(b, m, deterministic)
}
func (m *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(m, src)
}
func (m *Column) XXX_Size() int {
	return xxx_messageInfo_Column.Size(m)
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

func (m *Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Column) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *Column) GetColumnTypes() common1.ColumnType {
	if m != nil {
		return m.ColumnTypes
	}
	return common1.ColumnType_COLUMNTYPE_UDEFINED
}

func (m *Column) GetDataTypes() common1.DataType {
	if m != nil {
		return m.DataTypes
	}
	return common1.DataType_DATATYPE_UNDEFINED
}

func init() {
	proto.RegisterEnum("containersai.alameda.v1alpha1.datahub.schemas.Table", Table_name, Table_value)
	proto.RegisterType((*SchemaMeta)(nil), "containersai.alameda.v1alpha1.datahub.schemas.SchemaMeta")
	proto.RegisterType((*Measurement)(nil), "containersai.alameda.v1alpha1.datahub.schemas.Measurement")
	proto.RegisterType((*Column)(nil), "containersai.alameda.v1alpha1.datahub.schemas.Column")
}

func init() {
	proto.RegisterFile("alameda_api/v1alpha1/datahub/schemas/types.proto", fileDescriptor_01194bf23370964f)
}

var fileDescriptor_01194bf23370964f = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdf, 0x8a, 0xd3, 0x40,
	0x18, 0xc5, 0x4d, 0xff, 0xd9, 0x7e, 0x5d, 0x6a, 0x1c, 0x57, 0x08, 0x05, 0xb1, 0xf4, 0xaa, 0x08,
	0x9b, 0xd8, 0xaa, 0xe0, 0x85, 0x37, 0x69, 0x12, 0x25, 0xd2, 0xa4, 0x65, 0x36, 0x7b, 0xa1, 0x37,
	0xe5, 0x6b, 0x3a, 0x6c, 0x03, 0xcd, 0x1f, 0x93, 0xa9, 0xd0, 0x37, 0xf0, 0x25, 0x7c, 0x11, 0xdf,
	0xc1, 0x77, 0x92, 0xcc, 0xcc, 0x76, 0x15, 0x16, 0xd9, 0xbd, 0xfb, 0xe6, 0x90, 0xf3, 0x9b, 0x73,
	0x66, 0x32, 0xf0, 0x1a, 0xf7, 0x98, 0xb2, 0x2d, 0xae, 0xb1, 0x48, 0xac, 0xef, 0x53, 0xdc, 0x17,
	0x3b, 0x9c, 0x5a, 0x5b, 0xe4, 0xb8, 0x3b, 0x6c, 0xac, 0x2a, 0xde, 0xb1, 0x14, 0x2b, 0x8b, 0x1f,
	0x0b, 0x56, 0x99, 0x45, 0x99, 0xf3, 0x9c, 0x5c, 0xc4, 0x79, 0xc6, 0x31, 0xc9, 0x58, 0x59, 0x61,
	0x62, 0x2a, 0xbb, 0x79, 0x63, 0x35, 0x95, 0xd5, 0x54, 0xd6, 0x21, 0x89, 0xf3, 0x34, 0xcd, 0xb3,
	0xbf, 0x11, 0xc3, 0xe9, 0x7f, 0x37, 0x55, 0x86, 0x94, 0xf1, 0x32, 0x89, 0x95, 0x65, 0xfc, 0x43,
	0x03, 0xb8, 0x14, 0xc8, 0x80, 0x71, 0x24, 0x9f, 0xa1, 0xcd, 0x71, 0xb3, 0x67, 0x86, 0x36, 0xd2,
	0x26, 0x83, 0xd9, 0x5b, 0xf3, 0x41, 0xa1, 0xcc, 0xa8, 0xf6, 0x52, 0x89, 0x20, 0x43, 0xe8, 0xc6,
	0xc8, 0xd9, 0x75, 0x5e, 0x1e, 0x8d, 0xc6, 0x48, 0x9b, 0xf4, 0xe8, 0x69, 0x4d, 0x08, 0xb4, 0xea,
	0xe0, 0x46, 0x53, 0xe8, 0x62, 0x1e, 0xff, 0xd6, 0xa0, 0x1f, 0x30, 0xac, 0x0e, 0x25, 0x4b, 0x59,
	0xc6, 0xeb, 0x6f, 0x32, 0x4c, 0x65, 0x94, 0x1e, 0x15, 0x33, 0xf9, 0x02, 0x7d, 0x99, 0x7f, 0x2d,
	0xec, 0x0d, 0x91, 0xf2, 0xfd, 0x3d, 0x53, 0xca, 0x03, 0x30, 0x03, 0x01, 0x88, 0x8e, 0x05, 0xa3,
	0x90, 0x9e, 0x66, 0xb2, 0x84, 0xc7, 0x71, 0xbe, 0x3f, 0xa4, 0x59, 0x65, 0x34, 0x47, 0xcd, 0x49,
	0x7f, 0xf6, 0xee, 0x81, 0xe5, 0x1d, 0xe1, 0xa6, 0x37, 0x94, 0xf1, 0x2f, 0x0d, 0x3a, 0x52, 0xbb,
	0xb3, 0xca, 0x10, 0xba, 0x25, 0xfb, 0x76, 0x48, 0x4a, 0xb6, 0x15, 0x3d, 0xba, 0xf4, 0xb4, 0x26,
	0x73, 0x38, 0x93, 0x14, 0x51, 0xb3, 0x12, 0xc7, 0x34, 0x98, 0xbd, 0xfc, 0x37, 0x90, 0xaa, 0x23,
	0xb7, 0x10, 0x75, 0xfa, 0xf1, 0x69, 0xae, 0xc8, 0x07, 0x80, 0x3a, 0xa1, 0x22, 0xb4, 0x04, 0xe1,
	0xc5, 0x9d, 0x04, 0x17, 0x39, 0x0a, 0x7f, 0x6f, 0xab, 0xa6, 0xea, 0xd5, 0x4f, 0x0d, 0xda, 0xe2,
	0x36, 0xc9, 0x33, 0x78, 0x12, 0xd9, 0xf3, 0x85, 0xb7, 0xbe, 0x0a, 0x5d, 0xef, 0xa3, 0x1f, 0x7a,
	0xae, 0xfe, 0x88, 0x3c, 0x87, 0xa7, 0x52, 0xb4, 0x57, 0xab, 0x85, 0xef, 0xd8, 0x91, 0xbf, 0x0c,
	0x75, 0x8d, 0xe8, 0x70, 0x26, 0xe5, 0xc0, 0x8b, 0xa8, 0xef, 0xe8, 0x0d, 0x42, 0x60, 0x20, 0x95,
	0xd5, 0xc2, 0x0e, 0x43, 0x3f, 0xfc, 0xa4, 0x37, 0xc9, 0x39, 0xe8, 0x4a, 0xa3, 0x9e, 0xeb, 0x3b,
	0xc2, 0xdb, 0x22, 0x06, 0x9c, 0x4b, 0x95, 0x7a, 0xce, 0x32, 0x08, 0xbc, 0xd0, 0x95, 0xd4, 0xf6,
	0x2d, 0x83, 0x7a, 0x97, 0xcb, 0x2b, 0xea, 0x78, 0x7a, 0x67, 0xee, 0x7c, 0xb5, 0xaf, 0x13, 0xae,
	0x6e, 0xd5, 0xba, 0x6d, 0x75, 0x81, 0x89, 0x55, 0xff, 0xfd, 0xf7, 0x79, 0x7e, 0x9b, 0x8e, 0x78,
	0x03, 0x6f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x0a, 0x55, 0xb7, 0xad, 0x03, 0x00, 0x00,
}
